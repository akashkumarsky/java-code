package java450;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Q25findallElementNbyK {
	public static int findMajority(int[] nums, int n, int k) {
		int count = 0; 
		int candidate =-1;

		// Finding majority candidate
		for (int i = 0; i <= n; i++) {
			if (count == 0) {
				candidate = nums[i];
				count = 1;
			} else if (nums[i] == candidate) {
				count++;
			}
			else
				count--;

		}

		// Checking if majority candidate occurs more than
		// n/k times
		count = 0;
		for (int i = 0; i <= n; i++) {
			if (nums[i] == candidate)
				count++;
		}
		if (count > (k / n)) {
			return candidate;
		}
		return -1;

		// The last for loop and the if statement step can
		// be skip if a majority element is confirmed to
		// be present in an array just return candidate
		// in that case
	}

	static void morethanNdK(int[] arr, int n, int k) {
		int comp = n / k;

		Map<Integer, Integer> m = new HashMap<>();
		for (int i = 0; i < n; i++) {
			if (!m.containsKey(arr[i])) {
				m.put(arr[i], 1);
			} else {
				int count = m.get(arr[i]);
				m.put(arr[i], count + 1);
			}
		}
		for (int i : m.keySet()) {
			if (m.get(i) > comp) {
				System.out.print(i + " ");
			}
		}
	}

	public static void main(String[] args) {
		int[] arr = { 1, 1, 2, 2, 3, 5, 4, 2, 2, 3, 1, 1, 1 };
		int n = 12;
		int k = 4;
		//morethanNdK(arr, n, k);
		System.out.print(findMajority(arr, n, k));

	}

}
