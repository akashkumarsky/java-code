package javatree;

import java.util.LinkedList;
import java.util.Queue;

public class BinaryTreeImplemetiation {
	static class Node {
		int data;
		Node left;
		Node right;

		Node(int data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

	static class BinaryTee {
		static int index = -1;
 
		public static Node buildBinary(int nodes[]) {
			index++;
			if (nodes[index] == -1) {
				return null;
			}
			Node newNode = new Node(nodes[index]);
			newNode.left = buildBinary(nodes);
			newNode.right = buildBinary(nodes);
			return newNode;
		}
	}

	// Tree Traversals preorder
	public static void preorder(Node root) {
		if(root == null) {
			System.out.print(-1+" ");
			return;
		}
		System.out.print(root.data+" ");
		preorder(root.left);
		preorder(root.right);
	}
//	Tree Traversals inorder
	public static void inorder(Node root) {
		if(root == null) {
			System.out.print(-1+" ");
			return;
		}
		inorder(root.left);
		System.out.print(root.data+" ");
		inorder(root.right);
	}
	//Tree Traversals postorder
	public static void postorder(Node root) {
		if(root == null) {
			System.out.print(-1+" ");
			return;
			
		}
		postorder(root.left);
		postorder(root.right);
		System.out.print(root.data+" ");
	}
	//level order
	public static void levelorder(Node root) {
		if(root == null) {
			return;
		}
		Queue<Node> q = new LinkedList<>();
		q.add(root);
		q.add(null);
		while(!q.isEmpty()) {
			Node curr = q.remove();
			if(curr ==null) {
				System.out.println();
				if(q.isEmpty()) {
					break;
				}else {
					q.add(null);
				}
			}else {
				System.out.print(curr.data+" ");
				if(curr.left !=null) {
					q.add(curr.left);
				}
				if(curr.right != null) {
					q.add(curr.right);
				}
			}
		}
	}
	public static int height(Node root) {
		if(root == null) {
			return 0;
		}
		int leftheight = height(root.left);
		int rightheight = height(root.right);
		
		return Math.max(leftheight, rightheight)+1;
	}

	public static void main(String[] args) {
		int nodes[] = { 1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1 };
	//	BinaryTee tree = new BinaryTee();

		Node root = BinaryTee.buildBinary(nodes);
//		System.out.println(root.data);
		BinaryTreeImplemetiation.preorder(root);
		System.out.println();
		BinaryTreeImplemetiation.inorder(root);
		//System.out.print(root.data);
		System.out.println();
		BinaryTreeImplemetiation.postorder(root);
		System.out.println();
		BinaryTreeImplemetiation.levelorder(root);
		System.out.println();
	}
}
